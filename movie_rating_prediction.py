# -*- coding: utf-8 -*-
"""Movie rating prediction

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/#fileId=https%3A//storage.googleapis.com/kaggle-colab-exported-notebooks/movie-rating-prediction-4a20e1ba-1f94-4ecd-9159-51a895342668.ipynb%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com/20240520/auto/storage/goog4_request%26X-Goog-Date%3D20240520T151633Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D3b24e073ed2230ef5a4338df1be6c632687290cc9e114a739cb17753f9cc3dc73fde02cd5d925364a74a1d3c0b5713d62d8fcbf48c8b011e5975b587e7d55ca1fd631399285ff37304957296da32a2fe246737ea110f4bf4dc2aaeaf78fd17f2f417e74a610358da8b138e43188585f6f33e9ee39eb410a35cd867c34de21d390810271b4c3215c398d53be3a40ffb0a1185fbd578000071ba8eb61a62e4d879e5b59ed416f1fb583814ef1d674aa6fed9cc9d2d2d8708f9d438f1b8c7a023c41e592aa27320b776c0f1128c0c8624f1d963e73a9f3d99ef4512e2a0c39b9c5dc3099ab2309eee48bc62d13dc8bc6ae74d4ef3b505182bc54b6ed4cc5d53160c
"""

import os
import sys
from tempfile import NamedTemporaryFile
from urllib.request import urlopen
from urllib.parse import unquote, urlparse
from urllib.error import HTTPError
from zipfile import ZipFile
import tarfile
import shutil

CHUNK_SIZE = 40960
DATA_SOURCE_MAPPING = 'imdb-india-movies:https%3A%2F%2Fstorage.googleapis.com%2Fkaggle-data-sets%2F1416444%2F2346296%2Fbundle%2Farchive.zip%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com%252F20240520%252Fauto%252Fstorage%252Fgoog4_request%26X-Goog-Date%3D20240520T151633Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D2ff337e4dfd70fb61fa140c0e66fa144dfd57458628ff98b4964987f4e760630fbd6198a4d170da3b21e148ba97fb8f8ed4daa74094b0f440658497d854dfaa2dcda6a6af10fe4a9a7cd526070751ce78b841f705bae78bb033b3be6c1fb9244c535176e22d64ef7b47cd771cfb506d42c0fd5968fcc0078434e47af6986960a7dabaa456c81d185a3b56731d79d40d1d5fecba32b7368381d3155df4b78ff230eb3698982040160b1eeb2d740230f50266d46d23396ef7d7bfd50d3755d6cdaaf8ad9258ce280ea0b70cb9546512277966cd024a0bb9a668cd82eb64d4720ecf1b239d371b5c6ea17588942d80b5e6e2686c1f2af46d01eb71e713466584447'

KAGGLE_INPUT_PATH='/kaggle/input'
KAGGLE_WORKING_PATH='/kaggle/working'
KAGGLE_SYMLINK='kaggle'

!umount /kaggle/input/ 2> /dev/null
shutil.rmtree('/kaggle/input', ignore_errors=True)
os.makedirs(KAGGLE_INPUT_PATH, 0o777, exist_ok=True)
os.makedirs(KAGGLE_WORKING_PATH, 0o777, exist_ok=True)

try:
  os.symlink(KAGGLE_INPUT_PATH, os.path.join("..", 'input'), target_is_directory=True)
except FileExistsError:
  pass
try:
  os.symlink(KAGGLE_WORKING_PATH, os.path.join("..", 'working'), target_is_directory=True)
except FileExistsError:
  pass

for data_source_mapping in DATA_SOURCE_MAPPING.split(','):
    directory, download_url_encoded = data_source_mapping.split(':')
    download_url = unquote(download_url_encoded)
    filename = urlparse(download_url).path
    destination_path = os.path.join(KAGGLE_INPUT_PATH, directory)
    try:
        with urlopen(download_url) as fileres, NamedTemporaryFile() as tfile:
            total_length = fileres.headers['content-length']
            print(f'Downloading {directory}, {total_length} bytes compressed')
            dl = 0
            data = fileres.read(CHUNK_SIZE)
            while len(data) > 0:
                dl += len(data)
                tfile.write(data)
                done = int(50 * dl / int(total_length))
                sys.stdout.write(f"\r[{'=' * done}{' ' * (50-done)}] {dl} bytes downloaded")
                sys.stdout.flush()
                data = fileres.read(CHUNK_SIZE)
            if filename.endswith('.zip'):
              with ZipFile(tfile) as zfile:
                zfile.extractall(destination_path)
            else:
              with tarfile.open(tfile.name) as tarfile:
                tarfile.extractall(destination_path)
            print(f'\nDownloaded and uncompressed: {directory}')
    except HTTPError as e:
        print(f'Failed to load (likely expired) {download_url} to path {destination_path}')
        continue
    except OSError as e:
        print(f'Failed to load {download_url} to path {destination_path}')
        continue

print('Data source import complete.')

import numpy as np
import pandas as pd

movie=pd.read_csv('/kaggle/input/imdb-india-movies/IMDb Movies India.csv', encoding='latin-1')

movie

movie.shape

movie.isnull().sum().sum()

movie.isnull().sum()

movie

movie.isnull().sum().sum()

movie2=movie.fillna(method='pad')

movie2.isnull().sum()

movie2

movie2.isnull().sum()

import matplotlib.pyplot as plt

movie2.hist(bins=50, figsize=(10,15))

import seaborn as sns

plt.hist(movie2['Rating'],bins=5)

movie2.describe()

movie2

# Grouping the columns with their average rating and then creating a new feature

genre_mean_rating = movie2.groupby('Genre')['Rating'].transform('mean')
movie2['Genre_mean_rating'] = genre_mean_rating

director_mean_rating = movie2.groupby('Director')['Rating'].transform('mean')
movie2['Director_encoded'] = director_mean_rating

actor1_mean_rating = movie2.groupby('Actor 1')['Rating'].transform('mean')
movie2['Actor1_encoded'] = actor1_mean_rating

actor2_mean_rating = movie2.groupby('Actor 2')['Rating'].transform('mean')
movie2['Actor2_encoded'] = actor2_mean_rating

actor3_mean_rating = movie2.groupby('Actor 3')['Rating'].transform('mean')
movie2['Actor3_encoded'] = actor3_mean_rating

X = movie2[[ 'Year', 'Votes', 'Duration', 'Genre_mean_rating','Director_encoded','Actor1_encoded', 'Actor2_encoded', 'Actor3_encoded']]
y = movie2['Rating']

"""# Spliting The Data"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""# Model Testing"""

from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor

from sklearn.metrics import accuracy_score, mean_absolute_error, mean_squared_error, r2_score

# Building 2 machine learning models and training them
X_train_encoded = pd.get_dummies(X_train)
X_test_encoded = pd.get_dummies(X_test)
X_test_encoded = X_test_encoded.reindex(columns=X_train_encoded.columns, fill_value=0)

lr = LinearRegression()
lr.fit(X_train_encoded,y_train)
lr_pred = lr.predict(X_test_encoded)

rf = RandomForestRegressor()
rf.fit(X_train_encoded,y_train)
rf_pred = rf.predict(X_test_encoded)

# Evaluating the performance of trained algos

print('The performance evaluation of Logistic Regression is below: ', '\n')
print('Mean squared error: ',mean_squared_error(y_test, lr_pred))
print('Mean absolute error: ',mean_absolute_error(y_test, lr_pred))
print('R2 score: ',r2_score(y_test, lr_pred))
print('\n', '='*100, '\n')

print('The performance evaluation of Random Forest Regressor is below: ', '\n')
print('Mean squared error: ',mean_squared_error(y_test, rf_pred))
print('Mean absolute error: ',mean_absolute_error(y_test, rf_pred))
print('R2 score: ',r2_score(y_test, rf_pred))